% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mhEdge.R
\name{mhEdge}
\alias{mhEdge}
\title{mhEdge}
\usage{
mhEdge(data, adjMatrix, burnIn = 0.2, iterations = 1000, nGV,
  pmr = FALSE, prior = c(0.05, 0.05, 0.9), thinTo = 200)
}
\arguments{
\item{data}{A matrix with the nodes across the columns and the observations
down the rows.}

\item{adjMatrix}{The adjacency matrix returned by the MRPC algorithm. The
adjacency matrix is a matrix of zeros and ones. The ones represent an edge
and also indicates the direction of that edge.}

\item{burnIn}{A number between 0 and 1 indicating the percentage of the
sample that will be discarded.}

\item{iterations}{An integer for the number of iterations to run the MH
algorithm.}

\item{nGV}{The number of genetic variants in the graph.}

\item{pmr}{Logical. If true the Metropolis-Hastings algorithm will use the
Principle of Mendelian Randomization, PMR. This prevents the direction of an
edge pointing from a gene expression node to a genetic variant node.}

\item{prior}{A vector containing the prior probability of seeing each edge
direction.}

\item{thinTo}{An integer indicating the number of observations the sample
should be thinned to.}
}
\value{
A matrix where the first m columns are the edge directions and the
m + 1 column is the log likelihood. Each row represents one graph.
}
\description{
The main function for the Metropolis-Hastings algorithm. It returns the
posterior distribution of the edge directions.
}
\examples{
# Generate data under topology m1_gv.
data_m1 <- simdata(b0 = 0,
                   N = 200,
                   s = 1,
                   graph = 'm1_gv',
                   ss = 1,
                   p = 0.27)

# Use the true edges for the inferred edges.
am_m1 <- matrix(c(0, 1, 0,
                  0, 0, 1,
                  0, 0, 0),
                byrow = TRUE,
                nrow = 3)

# Run the Metropolis-Hastings algorithm with the Principle of Mendelian
# Randomization (PMR).
mh_m1_pmr <- mhEdge(data = data_m1,
                    adjMatrix = am_m1,
                    burnIn = 0.2,
                    iterations = 1000,
                    nGV = 1,
                    pmr = TRUE,
                    prior = c(0.05,
                              0.05,
                              0.9),
                    thinTo = 200)

summary(mh_m1_pmr)

# Generate data under topology m1_gv.
data_gn4 <- simdata(b0 = 0,
                    N = 200,
                    s = 1,
                    graph = 'gn4',
                    ss = 1)

# Use the true edges for the inferred edges.
am_gn4 <- matrix(c(0, 1, 1, 0,
                   0, 0, 0, 1,
                   0, 0, 0, 0,
                   0, 0, 1, 0),
                 byrow = TRUE,
                 nrow = 4)

mh_gn4 <- mhEdge(data = data_gn4,
                 adjMatrix = am_gn4,
                 burnIn = 0.2,
                 iterations = 1000,
                 nGV = 0,
                 pmr = FALSE,
                 prior = c(0.05,
                           0.05,
                           0.9),
                 thinTo = 200)

summary(mh_gn4)

}
